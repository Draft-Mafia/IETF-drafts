<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="3"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<rfc category="std" docName="draft-reddy-tram-turn-third-party-authz-00"
     ipr="trust200902">
  <front>
    <title abbrev="TURN for 3rd party Authorization ">TURN Extension for Third
    Party Authorization</title>

    <author fullname="Tirumaleswar Reddy" initials="T." surname="Reddy">
      <organization abbrev="Cisco">Cisco Systems, Inc.</organization>

      <address>
        <postal>
          <street>Cessna Business Park, Varthur Hobli</street>

          <street>Sarjapur Marathalli Outer Ring Road</street>

          <city>Bangalore</city>

          <region>Karnataka</region>

          <code>560103</code>

          <country>India</country>
        </postal>

        <email>tireddy@cisco.com</email>
      </address>
    </author>

    <author fullname="Prashanth Patil" initials="P." surname="Patil">
      <organization abbrev="Cisco">Cisco Systems, Inc.</organization>

      <address>
        <postal>
          <street/>

          <street/>

          <city>Bangalore</city>

          <country>India</country>
        </postal>

        <email>praspati@cisco.com</email>
      </address>
    </author>

    <author fullname="Ram Mohan Ravindranath" initials="R."
            surname="Ravindranath">
      <organization abbrev="Cisco">Cisco Systems, Inc.</organization>

      <address>
        <postal>
          <street>Cessna Business Park,</street>

          <street>Kadabeesanahalli Village, Varthur Hobli,</street>

          <street>Sarjapur-Marathahalli Outer Ring Road</street>

          <city>Bangalore</city>

          <region>Karnataka</region>

          <code>560103</code>

          <country>India</country>
        </postal>

        <email>rmohanr@cisco.com</email>
      </address>
    </author>

    <author fullname="Justin Uberti" initials="J." surname="Uberti">
      <organization>Google</organization>

      <address>
        <postal>
          <street>747 6th Ave S</street>

          <street>Kirkland, WA</street>

          <code>98033</code>

          <country>USA</country>
        </postal>

        <email>justin@uberti.name</email>
      </address>
    </author>

    <date/>

    <workgroup>TRAM</workgroup>

    <abstract>
      <t>This document proposes the use of OAuth to obtain and validate
      ephemeral tokens that can be used for TURN authentication. The usage of
      ephemeral tokens ensure that access to a TURN server can be controlled
      even if the tokens are compromised, as is the case in WebRTC where TURN
      credentials must be specified in Javascript. It also addresses the need
      for stronger authentication described in <xref
      target="I-D.reddy-behave-turn-auth"/>.</t>
    </abstract>
  </front>

  <middle>
    <section anchor="introduction" title="Introduction">
      <t>TURN <xref target="RFC5766"/> is a protocol that is often used to
      improve the connectivity of P2P applications. By providing a cloud-based
      relay service, TURN ensures that a connection can be established even
      when one or both sides is incapable of a direct P2P connection. However,
      as a relay service, it imposes a nontrivial cost on the service
      provider. Therefore, access to a TURN service is almost always
      access-controlled.</t>

      <t>TURN provides a mechanism to control access via "long-term" username/
      password credentials that are provided as part of the TURN protocol. It
      is expected that these credentials will be kept secret; if the
      credentials are discovered, the TURN server could be used by
      unauthorized users or applications. However, in web applications,
      ensuring this secrecy is typically impossible. To address this problem
      and the ones described in <xref target="I-D.reddy-behave-turn-auth"/>,
      this document proposes the use of third party authorization using OAuth
      for TURN.</t>

      <t>To achieve third party authorization, a resource owner eg WebRTC
      setver, authorizes a TURN client to access resources on the TURN server.
      </t>

      <t>Using OAuth, a client obtains an ephemeral token from an
      authorization server eg WebRTC server, and the token is presented to the
      TURN server instead of the traditional mechanism of presenting
      username/password credentials. The TURN server validates the
      authenticity of the token and provides required services.</t>
    </section>

    <section anchor="term" title="Terminology">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in <xref
      target="RFC2119"/>.</t>

      <t><list style="symbols">
          <t>WebRTC Server: A web server that supports WebRTC <xref
          target="I-D.ietf-rtcweb-overview"/>.</t>

          <t>Access Token: OAuth 2.0 access token.</t>

          <t>mac_key: The session key generated by the authorization server.
          Note that the lifetime of the session key is equal to the lifetime
          of the access token.</t>

          <t>kid: The name of the key (key id), which is an identifier
          generated by the resource server.</t>
        </list></t>
    </section>

    <section anchor="problem_stmt" title="Solution Overview">
      <t>This specification uses the token type 'Assertion' (aka
      self-contained token) described in <xref target="RFC6819"/> where all
      the information necessary to authenticate the validity of the token is
      contained within the token itself. This approach has the benefit of
      avoiding a protocol between the TURN server and the authorization server
      for token validation, thus reducing latency. The exact mechanism used by
      a client to obtain a token from the OAuth authorization server is
      outside the scope of this document. For example, a client could make an
      HTTP request to an authorization server to obtain a token that can be
      used to avail TURN services. The TURN token is returned as JSON, along
      with other OAuth Parameters like token type, mac_key, mac_algorithm,
      kid, token lifetime etc. The client is oblivious to the content of the
      token. The token is securely embedded within a TURN request sent to the
      TURN server. Once the TURN server has determined the token is valid,
      TURN services are offered for a determined period of time.</t>

      <t><figure anchor="figure1" title="TURN Third Party Authorization">
          <artwork><![CDATA[

+-------------------+                         +--------+  +---------+  
| .........  TURN   |                         |  TURN  |  |  WebRTC |
| .WebRTC .  Client |                         |        |  |         | 
| .Client .         |                         | Server |  |  Server |
| .........         |                         |        |  |         | 
+-------------------+                         +--------+  +---------+
  |       |               Allocate request            |         |
  |       |------------------------------------------>|         |
  |       |                                           |         |
  |       |         Allocate error response           |         |
  |       |<------------------------------------------|         |
  |       |         THIRD-PARTY-AUTHORIZATION         |         |                                        
  |       |                                           |         |
  |       |      HTTP Request for token               |         |
  |------------------------------------------------------------>|
  |       |      HTTP Response with token parameters  |         |
  |<------------------------------------------------------------|
  |       |                                           |         | 
  |OAuth  |                                           |         |
   Attributes                                         |         |
  |-----> |                                           |         |
  |       |               Allocate request            |         |
  |       |------------------------------------------>|         |
  |       |ACCESS-TOKEN, TIMESTAMP, KEY-ID, MAC-ALGORITHM       |
  |       |                                           |         |
  |       |                                           |         |
  |       |         Allocate success response         |         |
  |       |<------------------------------------------|         |
  |       |             TURN Messages                 |         |
  |       |      ////// integrity protected //////    |         |
  |       |      ////// integrity protected //////    |         |
  |       |      ////// integrity protected //////    |         |
       ]]></artwork>
        </figure></t>

      <t>For example HTTP response from Authorization server:</t>

      <figure anchor="Example" title="Example">
        <preamble/>

        <artwork align="left"><![CDATA[
     HTTP/1.1 200 OK
     Content-Type: application/json
     Cache-Control: no-store

     {
       "access_token":
   "eyJhbGciOiJSU0ExXzUiLCJlbmMiOiJBMTI4Q0JDK0hTMjU2In0.
   pwaFh7yJPivLjjPkzC-GeAyHuy7AinGcS51AZ7TXnwkC80Ow1aW47kcT_UV54ubo
   nONbeArwOVuR7shveXnwPmucwrk_3OCcHrCbE1HR-Jfme2mF_WR3zUMcwqmU0RlH
   kwx9txo_sKRasjlXc8RYP-evLCmT1XRXKjtY5l44Gnh0A84hGvVfMxMfCWXh38hi",
       "token_type":"mac",
       "expires_in":1800,
       "refresh_token":"8xLOxBtZp8",
       "kid":"22BIjxU93h/IgwEb4zCRu5WF37s=",
       "mac_key":"adijq39jdlaska9asud",
       "mac_algorithm":"hmac-sha1-160"
     }
              ]]></artwork>
      </figure>

      <t/>
    </section>

    <section anchor="oauth" title="Obtaining a Token Using OAuth">
      <t>A TURN client should know the authentication capability of the TURN
      server before deciding to use third party authorization with it. A TURN
      client initially makes a request without any authorization. If the TURN
      server supports or mandates third party authorization, it will return an
      error message indicating support for third party authorization. The TURN
      server includes an ERROR-CODE attribute with a value of 401
      (Unauthorized), a nonce value in a NONCE attribute and a SOFTWARE
      attribute that gives information about the TURN server's software. The
      TURN servers also includes additional STUN attribute
      THIRD-PARTY-AUTHORIZATION signalling the TURN client that the TURN
      server supports third party authorization.</t>

      <figure anchor="oauth_webrtc_terminology_map"
              title="OAuth terminology mapped to WebRTC terminology">
        <preamble>The following mapping of OAuth concepts to WebRTC is used
        :</preamble>

        <artwork align="left"><![CDATA[
              +----------------------+----------------------------+
              |         OAuth        |            WebRTC          |
              +======================+============================+
              | Client               | WebRTC client              |
              +----------------------+----------------------------+
              | Resource owner       | WebRTC server              |
              +----------------------+----------------------------+
              | Authorization server | Authorization server       |
              +----------------------+----------------------------+
              | Resource server      | TURN Server                |
              +----------------------+----------------------------+
              ]]></artwork>
      </figure>

      <t/>

      <t>Using the OAuth 2.0 authorization framework, a WebRTC client
      (third-party application) obtains limited access to a TURN (resource
      server) on behalf of the WebRTC server (resource owner or authorization
      server). The WebRTC client requests access to resources controlled by
      the resource owner (WebRTC server) and hosted by the resource server
      (TURN server). The WebRTC client obtains access token, lifetime, session
      key (in the mac_key parameter), key-id and mac_algorithm OAuth
      parameters from the authorization server as specified in <xref
      target="I-D.ietf-oauth-v2-http-mac"/>. The TURN client conveys the
      access token and other OAuth parameters learnt from the authorization
      server to the resource server (TURN server). The TURN obtains the
      session key via the access token. Both of these two key distribution
      steps are described in more detail in Section 4 of <xref
      target="I-D.ietf-oauth-v2-http-mac"/>. The TURN server validates the
      token, computes the message integrity of the request and takes
      appropriate action i.e permits the TURN client to create allocations.
      This is shown in an abstract way in <xref target="interactions"/>.</t>

      <figure anchor="interactions" title="Interactions">
        <artwork align="left"><![CDATA[                        
                        +---------------+
                        |               +<******+
         +------------->| Authorization |       *
         |              | Server        |       *    
         |   +----------|(WebRTC Server)|       *  AS-RS Key 
         |   |          |               |       *     (4) 
(1)      |   |           +---------------+      *   
Access   |   |  (2)                             *
Token    |   | Access Token                     *
Request  |   |    +                             *
         |   | Session Key                      *
         |   |                                  *
         |   V                                  V
     +-------+---+                       +-+----=-----+
     |           |         (3)           |            |
     |           | TURN Request + Access |            |
     | WebRTC    | Token                 | TURN       |
     | Client    |---------------------->| Server     |
     | (Alice)   |                       |            |
     |           |                       |            |
     +-----------+                       +------------+

User : Alice
****: Out-of-Band Long-Term Key Establishment

]]></artwork>
      </figure>

      <t/>

      <t>OAuth in <xref target="RFC6749"/> defines four grant types. This
      specification uses the OAuth grant type "Implicit" explained in section
      1.3.2 of <xref target="RFC6749"/> where the WebRTC client is issued an
      access token directly. The scope of the access token explained in
      section 3.3 of <xref target="RFC6749"/> MUST be TURN.</t>
    </section>

    <section anchor="Request" title="Forming a Request">
      <t>When a TURN server responds that third party authorization is
      required, a TURN client re-attempts the request, this time including
      access token, timestamp, lifetime, kid and mac_algorithm values in
      ACCESS-TOKEN, TIMESTAMP, LIFETIME, KEY-ID and MAC-ALGORITHM STUN
      attributes. The TURN client includes a MESSAGE-INTEGRITY attribute as
      the last attribute in the message over the contents of the TURN message
      using the mac_key and mac_algorithm. MESSAGE-INTEGRITY attribute is
      calculated using the other rules specified in section 15.4 of <xref
      target="RFC5389"> </xref>.</t>

      <t>The TURN client MUST not include the USERNAME attribute in the
      request. This differs from the long-term credential mechanism described
      in <xref target="RFC5389"/>.</t>
    </section>

    <section anchor="Response" title="TURN Server validating Request">
      <t>The TURN server, on receiving a request, performs checks listed in
      section 10.2.2 of <xref target="RFC5389"/> in addition to the following
      steps to verify that the access token is valid:</t>

      <t><list style="symbols">
          <t>The mac_key is transported to the TURN server using the mechanism
          explained in section 4.2 of <xref
          target="I-D.ietf-oauth-v2-http-mac"/>.</t>

          <t>The TURN server uses the mac_key and mac_algorithm to compute the
          value for the message integrity and if the resulting value does not
          match the contents of the MESSAGE-INTEGRITY attribute then reject
          the request with an error response 401 (Unauthorized).</t>

          <t>The TURN server verifies that no replay took place by comparing
          the value in the TIMESTAMP attribute with the local time. The
          timestamp verification procedure is described in Section 6.1 of
          <xref target="I-D.ietf-oauth-v2-http-mac"/>.</t>

          <t>If all the checks pass, the TURN server continues to process the
          request. Any response generated by the server MUST include the
          MESSAGE-INTEGRITY attribute, computed using the mac_key and
          mac_algorithm.</t>

          <t>The TURN server does not check for the presence of USERNAME.</t>
        </list></t>

      <t>A TURN response is discarded by the client if the value computed for
      message integrity using mac_key and mac_algorithm does not match the
      contents of the MESSAGE-INTEGRITY attribute.</t>
    </section>

    <section title="STUN Attributes">
      <t>The following new STUN attributes are introduced by this
      specification to accomplish third party authorization.</t>

      <section anchor="attribute" title="THIRD-PARTY-AUTHORIZATION">
        <t>This attribute is used by the TURN server to inform the client that
        it supports third party authorization. This attribute has no value
        part and thus the attribute length field is 0.</t>
      </section>

      <section anchor="token" title="ACCESS-TOKEN">
        <t>The access token is issued by the authorization server. OAuth does
        not impose any limitation on the length of the access token but since
        STUN messages cannot exceed 548 bytes (Section 7.1 of <xref
        target="RFC5389"/>), access token length needs to be restricted to fit
        within the maximum STUN message size. The value of ACCESS-TOKEN is a
        variable-length value. Its length MUST be less than 513 bytes.</t>

        <t>Since the access token is valid for a period of time the resource
        server MUST cache it so that it does not need to be provided in every
        request from the client. The ACCESS-TOKEN MUST only be included in the
        first request from the client to the server but MUST NOT be included
        in a subsequent request/response.</t>
      </section>

      <section anchor="timestamp" title="TIMESTAMP">
        <t>64-bit unsigned integer field containing a timestamp. The value
        indicates the time since January 1, 1970, 00:00 UTC, by using a fixed
        point format. In this format, the integer number of seconds is
        contained in the first 48 bits of the field, and the remaining 16 bits
        indicate the number of 1/64K fractions of a second (Native format -
        Unix).</t>
      </section>

      <section anchor="keyid" title="KEY-ID">
        <t>key id is an identifier generated by the resource server. This
        value selects the appropriate keying material for decryption. This
        keying material is a symmetric or an asymmetric long-term key
        established between the resource server and the authorization server,
        as shown in <xref target="interactions"/> as AS-RS key. The
        establishment of this long-term key is outside the scope of this
        specification and discussed in Appendix A.2.3 of <xref
        target="I-D.ietf-oauth-v2-http-mac"/>.</t>
      </section>

      <section anchor="algorithm" title="MAC-ALGORITHM">
        <t>Indicates the MAC algorithm. The MAC Algorithm ID field contains an
        IKEv2 Transform ID of Transform Type 3 <xref target="RFC4306"/>. All
        TURN implementations MUST support AUTH_HMAC_SHA1_160 (7) <xref
        target="RFC4595"/>.</t>
      </section>
    </section>

    <section anchor="security" title="Security Considerations">
      <t>When OAuth is used the interaction between the client and the
      authorization server requires Transport Layer Security (TLS) with a
      ciphersuite offering confidentiality protection. The session key MUST
      NOT be transmitted in clear since this would completely destroy the
      security benefits of the proposed scheme. Other security considerations
      are discussed in <xref target="I-D.ietf-oauth-v2-http-mac"/>.</t>
    </section>

    <section anchor="iana" title="IANA Considerations">
      <t>IANA is requested to add the following attributes to the <xref
      target="iana-stun">STUN attribute registry</xref>, <list style="symbols">
          <t>THIRD-PARTY-AUTHORIZATION</t>

          <t>ACCESS-TOKEN</t>

          <t>TIMESTAMP</t>

          <t>KEY-ID</t>

          <t>MAC-ALGORITHM</t>
        </list></t>
    </section>

    <section anchor="ack" title="Acknowledgements">
      <t>Authors would like to thank Dan Wing, Pal Martinsen for comments and
      review.</t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include="reference.RFC.2119"?>

      <?rfc include="reference.RFC.5389"?>

      <?rfc include="reference.RFC.6749"?>

      <?rfc include="reference.RFC.4306"?>

      <?rfc include="reference.RFC.4595"?>

      <?rfc include='reference.I-D.ietf-oauth-v2-http-mac'?>

      <reference anchor="iana-stun"
                 target="http://www.iana.org/assignments/stun-parameters/stun-pa rameters.xml">
        <front>
          <title>IANA: STUN Attributes</title>

          <author fullname="IANA" surname="IANA">
            <organization/>
          </author>

          <date month="April" year="2011"/>
        </front>
      </reference>
    </references>

    <references title="Informative References">
      <?rfc include='reference.I-D.ietf-rtcweb-use-cases-and-requirements'
?>

      <?rfc include='reference.I-D.ietf-rtcweb-overview'?>

      <?rfc include='reference.I-D.reddy-behave-turn-auth'?>

      <?rfc include="reference.RFC.5766"?>

      <?rfc include="reference.RFC.6819"?>

      <?rfc include="reference.RFC.5245"?>

      <?rfc include="reference.RFC.3261"?>

      <?rfc include="reference.RFC.6819"?>

      <!---->
    </references>
  </back>
</rfc>
