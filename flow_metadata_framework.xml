<?xml version="1.0" encoding="US-ASCII"?>
<!-- This template is for creating an Internet Draft using xml2rfc,
     which is available here: http://xml.resource.org. -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
     There has to be one entity for each item to be referenced. 
     An alternate method (rfc include) is described in the references. -->
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2629 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2629.xml">
<!ENTITY RFC3552 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3552.xml">
<!ENTITY I-D.narten-iana-considerations-rfc2434bis SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.narten-iana-considerations-rfc2434bis.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs), 
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space 
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<rfc category="info" docName="cisco-internal-flow-metadata-framework-00"
     ipr="trust200902">
  <!-- category values: std, bcp, info, exp, and historic
     ipr values: full3667, noModification3667, noDerivatives3667
     you can add the attributes updates="NNNN" and obsoletes="NNNN" 
     they will automatically be output with "(if approved)" -->

  <!-- ***** FRONT MATTER ***** -->

  <front>
    <!-- The abbreviated title is used in the page header - it is only necessary if the 
         full title is longer than 39 characters -->

    <title abbrev="Traffic intent attributes framework">A framework for
    traffic intent attributes and their signaling</title>

    <!-- add 'role="editor"' below for the editors if appropriate -->

    <!-- Another author who claims to be an editor -->

    <author fullname="Toerless Eckert" initials="T." role="editor"
            surname="Eckert">
      <organization>Cisco Systems, Inc.</organization>

      <address>
        <postal>
          <street/>

          <!-- Reorder these if your country does things differently -->

          <city>San Jose</city>

          <region/>

          <code/>

          <country>US</country>
        </postal>

        <phone>+1 408 902 2043</phone>

        <email>eckert@cisco.com</email>

        <!-- uri and facsimile elements may also be added -->
      </address>
    </author>

    <author fullname="Reinaldo Penno" initials="R." surname="Penno">
      <organization>Cisco Systems, Inc.</organization>

      <address>
        <postal>
          <street>170 West Tasman Drive</street>

          <city>San Jose</city>

          <region/>

          <code>95134</code>

          <country>USA</country>
        </postal>

        <phone/>

        <email>repenno@cisco.com</email>

        <!-- uri and facsimile elements may also be added -->
      </address>
    </author>

    <author fullname="Amine Choukir" initials="A." surname="Choukir">
      <organization>Cisco Systems, Inc.</organization>

      <address>
        <postal>
          <street/>

          <!-- Reorder these if your country does things differently -->

          <city>Lausanne</city>

          <region/>

          <code/>

          <country>CH</country>
        </postal>

        <phone>+41 78 75 98 561</phone>

        <email>amchouki@cisco.com</email>

        <!-- uri and facsimile elements may also be added -->
      </address>
    </author>

    <author fullname="Charles Eckel" initials="C." surname="Eckel">
      <organization>Cisco Systems, Inc.</organization>

      <address>
        <postal>
          <street>170 West Tasman Drive</street>

          <!-- Reorder these if your country does things differently -->

          <city>San Jose</city>

          <region>CA</region>

          <code>95134</code>

          <country>US</country>
        </postal>

        <email>eckelcu@cisco.com</email>

        <!-- uri and facsimile elements may also be added -->
      </address>
    </author>

    <date month="June" year="2013"/>

    <!-- If the month and year are both specified and are the current ones, xml2rfc will fill 
         in the current day for you. If only the current year is specified, xml2rfc will fill 
	 in the current day and month for you. If the year is not the current one, it is 
	 necessary to specify at least a month (xml2rfc assumes day="1" if not specified for the 
	 purpose of calculating the expiry date).  With drafts it is normally sufficient to 
	 specify just the year. -->

    <!-- Meta-data Declarations -->

    <area>General</area>

    <workgroup>Internet Engineering Task Force</workgroup>

    <!-- WG name at the upperleft corner of the doc,
         IETF is fine for individual submissions.  
	 If this element is not present, the default is "Network Working Group",
         which is used by the RFC Editor as a nod to the history of the IETF. -->

    <keyword>metadata framework</keyword>

    <!-- Keywords will be incorporated into HTML output
         files in a meta tag but they have no effect on text or nroff
         output. If you submit your draft to the RFC Editor, the
         keywords will be used for the search engine. -->

    <abstract>
      <t>The purpose of this document is to give an overview of a few, simple
      and useful elements toward better, consistent signaling between
      applications and the network for the purpose of proper visibility and
      treatment of application flows.</t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t>The purpose of this document is to give an overview of a few, simple
      and useful elements toward better, consistent signaling between
      applications and the network for the purpose of proper visibility and
      treatment of application flows. Identification and treatment of
      application flows is typically based on heuristics.</t>

      <t>Heuristics may be based on port ranges, IP subnetting, or deep packet
      inspection (DPI), e.g. application level gateway (ALG). Port based
      solutions suffer from port overloading and inconsistent port usage. IP
      subnetting solutions are error prone and result in network management
      hassle. DPI is computationally expensive and becomes a challenge with
      the wider adoption of encrypted signaling and secured traffic. An
      additional drawback of DPI is that the resulting insights are not
      available, or need to be recomputed at, network nodes further down the
      application flow path.</t>

      <t>The proposed solution allows applications to explicitly signal their
      flow characteristics to the network. It also provides network nodes with
      visibility of the application flow characteristics and enables them to
      contribute to the flow description. The resulting flow description may
      be communicated as feedback from the network to applications.</t>
    </section>

    <section title="Requirements Language">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in <xref
      target="RFC2119">RFC 2119</xref></t>
    </section>

    <section title="Overview">
      <section title="Deep packet inspection">
        <section title="Benefits">
          <t>Deep Packet Inspection (DPI) and other traffic observation
          methods (such as performance monitoring) are successfully being used
          for two type of workflows:<list counter="1" style="numbers">
              <t>Provide network operators with visibility into traffic for
              troubleshooting, capacity planning, accounting/billing and other
              offnet workflows. This is done by exporting observed traffic
              analysis via IPFIX.</t>

              <t>Provide differentiated network services for the traffic
              according to network operator defined rule sets. This includes
              assignment of different QoS classes for different traffic
              classes identified by DPI including policing/shaping of traffic,
              providing admission control, impacting routing, permitting
              passing of traffic (eg: firewall functions), assigning different
              context in the network (VRF, VLAN,..) and so on.</t>
            </list>Note: For the context of this document, we consider that
          DPI starts as early into packets as using ACLs with UDP/TCP port
          numbers to classify traffic.</t>
        </section>

        <section title="Limitation">
          <t>These two workflows, visibility and differentiated networks
          services, are highly critical in many network. However, their
          reliance on inspection/observation limits the ability to apply these
          workflows more widely.<list style="symbols">
              <t>Simple observation based classification, especially the ones
              relying on TCP/UDP ports will often result in incorrect results
              because those ports are not only used by the applications that
              once claimed them with IANA.</t>

              <t>More and more traffic becomes encrypted and therefore renders
              deep packet inspection impossible or much more complex - such as
              when having to share encryption keys with network equipment.</t>

              <t>Observation often needs to inspect control/signaling of
              application traffic which may flow on different network paths
              than the actual application media traffic whose behavior should
              be impacted.</t>

              <t>Observation of control/signaling and media traffic with DPI
              will in general result in less insight into the applications
              intent than if the application was explicitly signaling its
              intent to the network.</t>

              <t>Without explicit desire by the application to signal its
              intent to the network, it will also not consider to explicitly
              provide authentication to the network, so DPI mechanism also
              have a more difficult job in analyzing application layer
              authentication mechanisms (if they can)</t>

              <t>Without explicit involvement of the application, feedback
              from network services leveraging DPI traffic classification
              impact the application behavior by impacting its traffic, but
              cannot provide explicit feedback to the application in the form
              of signaling.</t>
            </list></t>
        </section>
      </section>

      <section title="Explicit signaling methods">
        <t>There is a variety of existing and evolving signaling options that
        can provide explicit application to network signaling and serve the
        differentiated network services and visibility workflows where DPI is
        currently being used.It seems clear that there will be no single
        one-protocol-fits-all solution. Every protocol is currently defined in
        its own silo, creating duplicate and/or inconsistent information
        models. This results in duplicate work, more operational complexity
        and an inability to easily convert information between protocols to
        easily leverage the best protocol option for each specific use case.
        Examples of existing signaling options include the following:<list
            style="symbols">
            <t>RSVP is the original on path signaling protocol standardized by
            the IETF. It operates on path out-of-band and could support any
            transport protocol traffic (it currently supports TCP and UDP).
            Its original goal was to provide admission control. It gained only
            limited success with that service. Arguably, its success was
            impacted by its reliance on router-alert because this often leads
            to RSVP packets being filtered by intervening networks. To date,
            more lightweight signaling workflows utilizing RSVP have not been
            standardized within the IETF.</t>

            <t>NSIS (next Steps in Signaling) is the next iteration of
            RSVP-like signaling defined by the IETF. Because it still focused
            on the same fundamental workflow as RSVP admission control as its
            main driver, and because it did not provide significant enough
            use-case benefits over RSVP, it has seen even less adoption than
            RSVP.</t>

            <t>STUN is an on path, in-band signaling protocol that could
            easily be extended to provide signaling to on path network devices
            because it provides an easily inspected packet signature, at least
            for transport protocols such as UDP and SCTP. Through its
            extensions TURN and ICE, it is becoming quite popular in
            application signaling driven by the initial use-case of
            automatically opening up firewall pinholes and determining the
            best local/remote addresses for peer-to-peer connectivity
            (ICE).</t>

            <t>PCP is a protocol designed to support use cases similar to UPnP
            firewall traversal. It also can easily be extended to provide more
            generic application/network signaling for traffic flows. Unlike
            the prior protocols, it is not meant to be used on path end-to-end
            but rather independently on one "edge" of a traffic flow. It is
            therefore an attractive alternative (albeit with challenges under
            path redundancy) because it allows the introduction of application
            to network signaling without relying on the remote peer. This is
            specially useful in multi-domain communications.</t>

            <t>In addition to these, depending on the devices where it is
            performed, different degrees of DPI may be used to achieve
            explicit signaling. For example, inspection of HTTP connections is
            often viable in high-touch network devices. Such inspection may
            provide explicit signaling if the application purposely keeps or
            inserts information elements that are meant to be signaled to the
            network in the clear, or knowingly uses an encryption shared with
            the network.</t>
          </list></t>
      </section>
    </section>

    <section title="Proposed framework">
      <section title="Overview">
        <t>The proposed framework includes the following elements:</t>

        <section title="Common, application independent, IPFIX registered, information elements">
          <t>An applications media flows may be expressed as a set of
          information elements that are defined and registered like
          observation-based IPFIX attributes. We propose leveraging IPFIX as
          the information model (not necessary as the transport signaling) for
          the following reasons:<list style="symbols">
              <t>As outlined above, export of traffic information is one of
              the two big workflows. IPFIX is arguably the most flexible,
              extensible and best defined option for this. Leveraging the same
              information model for flow characteristics allows the easy
              export of this information via IPFIX.</t>

              <t>IPFIX allows both for IETF/IANA standardized information
              elements, but also for unambiguous vendor-defined attributes by
              including the so-called PEN (Private Enterprise Number) into the
              information element type. Note that IPFIX has ongoing work to
              better disseminate vendor specific registration of attributes.
              The framework defined here expects to be able to leverage the
              output of that work.</t>
            </list></t>
        </section>

        <section title="Cross-protocol information element encoding rules">
          <t>The majority of the protocols listed previously (RSVP, NSIS,
          STUN/ICE, PCP) require (or favor) compact, binary encoding of
          information elements. This is natively supported by the information
          element registration of IPFIX. </t>

          <t>The IPFIX registry defines each information element's data-type,
          and there is a native binary network encoding for each of these
          types. At a minimum, every protocol leveraging common information
          elements would need to use an encoding that identifies the
          information element's PEN and IE-ID, and that leverages network
          standard binary encoding of the value including the length of the
          value. Including the length of the value into the encoding is
          required for extensibility because otherwise new information
          elements could not be introduced without first having all network
          devices know the data-type, and therefore the length, of the
          information element. Leveraging network standard binary encoding is
          equally important to permit network elements to propagate
          information elements from one protocol to another protocol without
          understanding the information elements data-type.</t>

          <t>In protocols that are not constrained to binary encoding, it is
          nevertheless highly desirable to include the equivalent information
          and therefore permit propagation between binary and non-binary
          transport of information elements without having to understand all
          information elements.</t>
        </section>

        <section title="Anticipated Usage Models">
          <t>The signaling of information elements may be from application to
          the network or from network to application. When signaled within a
          given protocol, this signaling may be interpreted independently of
          that protocol, or it may be used in combination with the given
          protocol.</t>

          <section title="Advisory application to network traffic classification">
            <t>This is the most basic usage model to enable the workflows
            traditionally performed via DPI mechanisms as explained
            previously. The application leverages one or more of the
            appropriate signaling protocols to indicate the common information
            elements and values that describe the application's media traffic
            flows. The application expects no signaling feedback form the
            network.</t>

            <t>We observe that many protocols do not natively support this
            basic transaction. It is highly desirable to support it
            independent of any additional transactions because more advanced
            transaction may be something the application does not desire to
            perform.</t>

            <t>In addition, it is highly desirable that all protocols support
            the ability to indicate the common information element
            classification not only for the traffic flows originated by the
            application but also, to the extent it is possible, for the
            traffic flows received by the application (often times the reverse
            5-tuple flows from the ones being sent). This is customary in
            protocols such as PCP that are designed to support edge-signaling,
            but it is equally beneficial in signaling destined to be
            end-to-end - in case the other side does not support explicit
            signaling of information about its traffic flow.</t>

            <t>Note that this basic advisory application to network traffic
            classification is sufficient to trigger the most often asked for
            network services, such as a network element setting the right QoS
            for the traffic.</t>
          </section>

          <section title="Enhancing protocol specific transactions">
            <t>Whenever an application uses a signaling protocols to perform a
            transaction that is specific to a particular traffic-class/flow,
            the protocol should support a way to add the common information
            elements to the signaling from the application to the network.
            When doing so, information elements provide additional information
            to the network element that can improve the outcome of a
            transaction.</t>

            <t>For example, assume a PCP transaction to secure an outside
            UDP/TCP port on a NAT. Providing additional informational
            attributes can help the PCP server on the NAT decide which of the
            requesting applications to grant the more prestigious "native"
            port (eg: port 80). Similarly, with RSVP it is possible to
            negotiate the DSCP to be used for traffic flows by using the
            DCLASS object in a transaction. The network can signal back to
            applications what DSCP they should set. This is beneficial if the
            DSCP needs to be set correctly before a network device can set it
            appropriately based on purely advisory common information elements
            (for example if the sending device or the access-L2-network has
            QoS). By providing common information elements, the network can
            decide the right DSCP to signal back.</t>
          </section>
        </section>

        <section title="Considerations for signaling of common information elements">
          <section title="Support for proxy originated information">
            <t>While the goal of this framework is to enable applications to
            explicitly signal common information elements about their traffic
            flows (and optionally receive common information elements from the
            network as feedback), it is clear that wide-range adoption of such
            technology is improved by enabling also the use of proxies that
            can provide or amend that information in the absence of support by
            the application itself. </t>
          </section>

          <section title="Authentication of common information elements">
            <t>Common information elements should provide for cryptographic
            authentication by the sender. In general the authentication
            provides some form of identification of the sender and proves that
            the common information elements covered by the authentication
            where originated (or approved) by that identity.</t>
          </section>

          <section title="Common encoding of common information elements">
            <t>A companion document [ENCODING] covers recommended encoding
            rules that take the above aspects into account:<list
                style="symbols">
                <t>Compact binary encoding rules</t>

                <t>Signaling for both sent and received traffic flows</t>

                <t>Minimizes the per-protocol definition required to define
                purely advisory application to network traffic classification
                or to embed common information elements into existing
                transactions</t>

                <t>Signaling of feedback from the network</t>

                <t>Identification of originator to support proxies and
                facilitate mitigation between common information elements from
                different originators</t>

                <t>Signaling of authenticators</t>
              </list></t>
          </section>
        </section>
      </section>

      <section title="Proposed common information elements">
        <t>The section defines an initial set of common information elements.
        Additional information elements may be defined in other documents. The
        definition of an information element must include the following:<list
            counter="1" style="numbers">
            <t>Default value to be provided by an application when it does not
            have an informative value to provide to the network, but is
            interested in receiving an informative value of the attribute from
            the network</t>

            <t>Conflict resolution in the presence of different values for the
            same information element (e.g. two peers signaling information
            elements for both the upstream and downstream direction of a flow
            include different values for the information element)</t>
          </list></t>

        <section title="Maximum Bandwidth">
          <t>This attribute is used to convey the maximum sustained bandwidth
          for the flow. It is a 64 bit value and is specified in bits per
          second.</t>

          <t>Default Value: 0</t>

          <t>Conflict Resolution: Minimum for the set of non default
          values</t>
        </section>

        <section title="Minimum Bandwidth">
          <t>This attribute is used to convey the minimum sustained bandwidth
          for the flow. It is a 64 bit value and is specified in kilobits per
          second.</t>

          <t>Default Value: 0</t>

          <t>Conflict Resolution: Minimum of the set of non default values</t>
        </section>

        <section title="DSCP">
          <t>This attribute is used to convey the DSCP value appropriate for
          the flow. It is an 8 bit value. Valid values are defined in RFC
          4594. Other values are undefined.</t>

          <t>Default Value: 0xff</t>

          <t>Conflict Resolution: tbd</t>
        </section>

        <section title="Traffic Class Label (TCL)">
          <t>The data type of this information element is a string. It carries
          the Traffic Class Label defined in
          [draft-ietf-mmusic-traffic-class-for-sdp]. Depending on the outcome
          of that drafts standardization, the version carried as an
          information element may be slightly expanded over the its definition
          for SDP. The TCL is a structured string of the form:</t>

          <t>&lt;category&gt;.&lt;application&gt;(.adjective)(.adjective)</t>

          <t>category and application provide a base categorization of the
          traffic class that attempts to provide a simplified and extensible,
          framework for the traffic class definitions in RFC4594. These base
          classifications can be refined with zero or more adjectives.
          Examples of a TCL is "conversational.video.avconf".</t>

          <t>Default Value: Empty string</t>

          <t>Conflict Resolution: tbd</t>
        </section>

        <section title="Delay Tolerance">
          <t>This attribute is used to convey the delay tolerance of an
          application with respect to the associated flow. When provided by a
          network element, it indicates the delay tolerance expected of the
          application with respect to the associated flow. It is a 16 bit
          field defined in terms of milliseconds. </t>

          <t>Default Value: 0</t>

          <t>Conflict Resolution: For application to network, the minimum of
          the set of non default values. For network to application, the
          maximum of the set of non default values.</t>
        </section>

        <section title="Loss Tolerance">
          <t>This attribute is used to convey the loss tolerance of an
          application with respect to the associated flow. When provided by a
          network element, it indicates the loss tolerance expected of the
          application with respect to the associated flow. It is an 8 bit
          field defined in terms of percentage of dropped packets.</t>

          <t>Default Value: 0</t>

          <t>Conflict Resolution: For application to network, the minimum of
          the set of non default values. For network to application, the
          maximum of the set of non default values.</t>
        </section>

        <section title="Application Identification">
          <t>Application identification is clearly one of the more difficult
          classification goals. The proposals included here are as of yet not
          widely vetted:</t>

          <section title="RFC 6759 style application identification">
            <t>RFC6759 defines the IPFIX IE-IDs that permit both IANA and
            vendor specific application identification. Though defined for
            observation (aka: DPI), it could also be used with explicit
            signaling from applications.</t>

            <t>Applications that use one of the protocols for which there is
            an IANA port allocation could explicitly indicate this port via
            the IANA-L4 engine-id in their application to network signaling.
            This would identify the application even if the application is not
            using the IANA assigned port for it. This covers cases in which
            applications use ports other than registered, such as HTTP servers
            running on other than 80, or when ports get mapped due to PAT.</t>

            <t>To avoid collision with DPI exported IANA-L4 classification, it
            is necessary to assign a new engine-id for application-self
            assigned IANA-L4 classification (eg: new engine-id for
            IANA-L4-SELF-ASSIGNED). If an application vendor has a PEN, the
            application can use a PANA-L7-PEN classification with the PEN of
            the originating application vendor. Likewise, if applications are
            in general made available via "market" type reseller mechanism
            (common in mobile device applications), then the application
            vendor could request an application identification from the market
            owner and leverage the market owners PEN.</t>
          </section>

          <section title="URL style application identification">
            <t>One problem with RFC 6759 style application identification
            especially non-IANA registered ones is the complexity in making
            all network elements learn the semantic of the numeric encoding of
            eg: the PANA-L7-PEN information element in signaling protocols
            that only use the numeric encoding of information elements.
            Application identification via a URL encoded string information
            element is presumably easier to introduce and disseminate. Today,
            almost all application have some web-page associated with them, so
            one simple form of self assigned application identification is a
            new IPFIX information element: UrlAppId The value of this
            information element is an abbreviated URL of the form:</t>

            <t>&lt;fqdn&gt; / &lt;app-name&gt; /[ &lt;version&gt; |
            &lt;other-details&gt; ]</t>

            <t>The idea is that the owner of &lt;fqdn&gt; (fully qualified
            domain name) is assigning an &lt;app-name&gt;, and by signaling
            both &lt;domain-name&gt; and &lt;app-name&gt;, this information
            element provides a self-identifying, unambiguous application
            identification. As necessary further distinctions for different
            traffic flows in an application that are not better covered by
            other information elements can be added after another "/". It
            should be noted that in the context of DPI, classification of
            web-based application traffic is very often performed by URL
            inspection of HTTP traffic. This proposed intent based information
            element leverages that model and makes it usable where it was
            currently not working: encrypted HTTP, non-HTTP applications, HTTP
            applications with useless URLs, etc.</t>
          </section>
        </section>
      </section>
    </section>
  </middle>

  <!--  *****BACK MATTER ***** -->

  <back>
    <!-- References split into informative and normative -->

    <!-- There are 2 ways to insert reference entries from the citation libraries:
     1. define an ENTITY at the top, and use "ampersand character"RFC2629; here (as shown)
     2. simply use a PI "less than character"?rfc include="reference.RFC.2119.xml"?> here
        (for I-Ds: include="reference.I-D.narten-iana-considerations-rfc2434bis.xml")

     Both are cited textually in the same manner: by using xref elements.
     If you use the PI option, xml2rfc will, by default, try to find included files in the same
     directory as the including file. You can also define the XML_LIBRARY environment variable
     with a value containing a set of directories to search.  These can be either in the local
     filing system or remote ones accessed by http (http://domain/dir/... ).-->

    <references title="Normative References">
      <!--?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml"?-->

      &RFC2119;

      <reference anchor="min_ref">
        <!-- the following is the minimum to make xml2rfc happy -->

        <front>
          <title>Minimal Reference</title>

          <author initials="authInitials" surname="authSurName">
            <organization/>
          </author>

          <date year="2006"/>
        </front>
      </reference>
    </references>

    <references title="Informative References">
      <!-- Here we use entities that we defined at the beginning. -->

      &RFC2629;

      &RFC3552;

      &I-D.narten-iana-considerations-rfc2434bis;

      <!-- A reference written by by an organization not a person. -->

      <reference anchor="DOMINATION"
                 target="http://www.example.com/dominator.html">
        <front>
          <title>Ultimate Plan for Taking Over the World</title>

          <author>
            <organization>Mad Dominators, Inc.</organization>
          </author>

          <date year="1984"/>
        </front>
      </reference>
    </references>

    <section anchor="app-additional" title="Additional Stuff">
      <t>This becomes an Appendix.</t>
    </section>

    <!-- Change Log

v00 2006-03-15  EBD   Initial version

v01 2006-04-03  EBD   Moved PI location back to position 1 -
                      v3.1 of XMLmind is better with them at this location.
v02 2007-03-07  AH    removed extraneous nested_list attribute,
                      other minor corrections
v03 2007-03-09  EBD   Added comments on null IANA sections and fixed heading capitalization.
                      Modified comments around figure to reflect non-implementation of
                      figure indent control.  Put in reference using anchor="DOMINATION".
                      Fixed up the date specification comments to reflect current truth.
v04 2007-03-09 AH     Major changes: shortened discussion of PIs,
                      added discussion of rfc include.
v05 2007-03-10 EBD    Added preamble to C program example to tell about ABNF and alternative 
                      images. Removed meta-characters from comments (causes problems).  -->
  </back>
</rfc>
