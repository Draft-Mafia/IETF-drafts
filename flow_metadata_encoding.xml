<?xml version="1.0" encoding="US-ASCII"?>
<!-- This template is for creating an Internet Draft using xml2rfc,
     which is available here: http://xml.resource.org. -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
     There has to be one entity for each item to be referenced.
     An alternate method (rfc include) is described in the references. -->
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2629 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2629.xml">
<!ENTITY RFC3552 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3552.xml">
<!ENTITY I-D.narten-iana-considerations-rfc2434bis SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.narten-iana-considerations-rfc2434bis.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs),
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<?rfc autobreaks="yes"?>
<!-- Prevent automatic page break -->
<!-- end of list of popular I-D processing instructions -->
<rfc category="std" docName="draft-ietf-flow-metadata-encoding-00"
    ipr="trust200902">
    <!-- category values: std, bcp, info, exp, and historic
     ipr values: full3667, noModification3667, noDerivatives3667
     you can add the attributes updates="NNNN" and obsoletes="NNNN"
     they will automatically be output with "(if approved)" -->

  <!-- ***** FRONT MATTER ***** -->

  <front>
      <!-- The abbreviated title is used in the page header - it is only necessary if the
         full title is longer than 39 characters -->

    <title abbrev="Flow Metadata Encoding">Protocol independent encoding for
        signaling flow characteristics</title>

    <!-- add 'role="editor"' below for the editors if appropriate -->

    <!-- Another author who claims to be an editor-->

    <author fullname="Toerless Eckert" initials="T." role="editor"
        surname="Eckert">
        <organization>Cisco Systems, Inc.</organization>

        <address>
            <postal>
                <street/>

                <!-- Reorder these if your country does things differently -->

                <city>San Jose</city>

                <region/>

                <code/>

                <country>US</country>
            </postal>

            <phone>+1 408 902 2043</phone>

            <email>eckert@cisco.com</email>

            <!-- uri and facsimile elements may also be added -->
        </address>
    </author>

    <author fullname="Anca Zamfir" initials="A." surname="Zamfir">
        <organization>Cisco Systems, Inc.</organization>

        <address>
            <postal>
                <street/>

                <!-- Reorder these if your country does things differently -->

                <city>Lausanne</city>

                <region/>

                <code/>

                <country>CH</country>
            </postal>

            <phone>+41 21 69 43 826</phone>

            <email>ancaz@cisco.com</email>

            <!-- uri and facsimile elements may also be added -->
        </address>
    </author>

    <author fullname="Amine Choukir" initials="A." surname="Choukir">
        <organization>Cisco Systems, Inc.</organization>

        <address>
            <postal>
                <street/>

                <!-- Reorder these if your country does things differently -->

                <city>Lausanne</city>

                <region/>

                <code/>

                <country>CH</country>
            </postal>

            <phone>+41 78 75 98 561</phone>

            <email>amchouki@cisco.com</email>

            <!-- uri and facsimile elements may also be added -->
        </address>
    </author>

    <date month="May" year="2013"/>

    <!-- If the month and year are both specified and are the current ones, xml2rfc will fill
         in the current day for you. If only the current year is specified, xml2rfc will fill
         in the current day and month for you. If the year is not the current one, it is
         necessary to specify at least a month (xml2rfc assumes day="1" if not specified for the
         purpose of calculating the expiry date).  With drafts it is normally sufficient to
         specify just the year. -->

    <!-- Meta-data Declarations -->

    <area>General</area>

    <workgroup>Internet Engineering Task Force</workgroup>

    <!-- WG name at the upperleft corner of the doc,
         IETF is fine for individual submissions.
         If this element is not present, the default is "Network Working Group",
         which is used by the RFC Editor as a nod to the history of the IETF. -->

    <keyword>template</keyword>

    <!-- Keywords will be incorporated into HTML output
         files in a meta tag but they have no effect on text or nroff
         output. If you submit your draft to the RFC Editor, the
         keywords will be used for the search engine. -->

    <abstract>
        <t>
            This document describes a protocol independent encoding for Flow
            Metadata. A flow in this context is defined as a 5-tuple (IP_src,
            Port_src, IP_dst, Port_dst, Transport) where Transport is a layer 4
            protocol such as TCP or UDP. Both Port_src and Port_dst both refer
            to this protocol. Flow Metadata exposes key characteristics
            of the flow such as the originating application, the type of media in
            use (e.g. audio, video) and others as defined in [I-D-FMD]. The flow
            characteristics are captured through Metadata tags. The Metadata
            tags information is signaled either out of band or in band but
            always along the same path of the data flow transmitted by an application.
            As flow characteristics across different signaling protocols are
            identical they benefit from a single definition and encoding
            irrespective of the signaling protocol in use.
            Examples of out of band and in band protocols would be RSVP
            [RFC-RSVP-FMD] and STUN [RFC-STUN-FMD]. Different network deployments
            call out for different protocols or combination of protocols as
            described in [RFC-FMD]. The flow characteristics can be inspected by
            intermediate network nodes for the purpose of applying a particular
            treatment to the flow or simply for gathering insight on the nature of
            the traffic crossing the network node.
        </t>

        <t> [RFC-FMD] defines the
            overall framework for Flow Metadata and the definition of the flow
            characteristics. This document captures the flow characteristics
            encoding. The mapping of the Flow Metadata encoding to the different
            signaling protocols is outside the scope of this document.</t>
    </abstract>
</front>

<middle>
    <section title="Introduction">
        <t>TBD &gt; Need to describe the unidirectional vs bidirectional &gt;
            Should explain the different producers</t>

        <section title="Requirements Language">
            <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
                "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
                document are to be interpreted as described in <xref
                    target="RFC2119">RFC 2119</xref>.</t>
        </section>
    </section>

    <section title="Encoding Overview">
        <section title="General Principles">
            <t>This specification assumes that the flow 5-tuple is determined by
                the transport protocol which carries the Metadata tags. As an example,
                in STUN the 5-tuple is present in the layer 3 and 4 headers of the
                message. In RSVP the 5-tuple is
                obtained from the SESSION and SENDER-TEMPLATE objects. In PCP the
                source IP is part of the request common header; the remainder of the
                5-tuple needs to be embedded in the opcode data.
            </t>

            <t>The Flow Metadata characteristics are to be interpreted in the
                context of the 5-tuple defined by the signaling protocol. The Flow
                Metadata encoding does not carry any elements of the 5-tuple but
                merely the flow characteristics.</t>

            <t>The encoding defined herein does not relate to any specific
                signaling but rather allows different signaling protocols to transport
                flow characteristics. As the encoding is shared amongst several
                protocols, it is versioned independently to allow, if needed, its
                evolution without impacting the signaling protocol.</t>
        </section>

        <section title="Encoding Goals">
            <t>Following goals have been considered in the design of the
                encoding:<list style="symbols">
                    <t>Transport independence</t>

                    <t>Allow for a standard namespace as well as vendor specific
                        namespaces</t>

                    <t>Support multiple producers of flow characteristics</t>

                    <t>Ability to encode flow characteristics for both the flow itself
                        (upstream) and the flow in the reverse direction (downstream).</t>

                    <t>Extensibility while allowing for backwards compatiblity.</t>

                    <t>Flexibility</t>

                    <t>Support for integrity, authenticatication and authorization on
                        a per producer basis</t>

                    <t>Compact encoding</t>
            </list></t>

            <section title="Transport independence">
                <t>One goal of this proposal is to provide an encoding that can be
                    used by more than one transport protocol. This should help with the
                    future standardization effort and also implementations that make use
                    of different protocols when transporting Flow Metadata. One example
                    is an endpoint that may use different signaling protocols depending
                    on the environment, peer protocol support, etc. Another is a
                    middlebox on an administrative boundary that may need to perform
                    protocol interworking functions.</t>

                <t>It is recommended that transport protocol implementations syntactically 
                    validate the encoded flow characteristics block, e.g., verify that the
                    length fields are correct. However, for extensibility and consistency
                    reasons, transport protocols should not attempt to semantically
                    interpret an encoded flow characteristics block; this should be left
                    to upper layers (e.g., the local Metadata module).</t>
            </section>

            <section title="Standard and Vendor Specific Namespaces">
                <t>Vendors need the ability to define and use proprietary Metadata
                    when they are delivering a pre-standard feature or product or when
                    the encoded information is of commercially sensitive nature. This
                    specification provides support for both standard and vendor specific
                    defined flow characteristics.</t>
            </section>

            <section title="Multiple Producers">

                <t>Multiple producers may contribute flow characteristics to the
                    Flow Metadata information associated with a given flow.</t>

                <t>Endpoints and applications are one category of candidates for
                    generating Flow Metadata as they have precise knowledge of the flows
                    they insert into the network. Middleboxes constitute a second class
                    of Metadata producers. Deep Packet Inspection engines are deployed
                    to recognize the originator and nature of the flows traversing a
                    network. Media Termination Points (e.g. MCU, Transcoders) are
                    deployed to offer additional services to voice endpoints and
                    applications. Media Termination Points have knowledge of the
                    transformations they apply
                    on the flow they receive and can therefore update the
                    characteristics of the flow. Other proxies and gateways do exist for
                    other applications and could produce information in relation to the
                    flow.</t>


                <t>[AZ - this one needs to be explained with examples later even if
                    we say is out of scope ..tho not sure]</t>
            </section>

            <section title="Bi-directional signaling">
                <t>As detailed in [RFC-FMD] a flow is unidirectional by definition
                    but some use cases and signaling protocols require the ability to
                    signal both upstream and downstream flow characteristics. For
                    example, when using end-to-edge transport protocols, such as PCP, it
                    is possible that the peer endpoint, even if it is Metadata capable,
                    is not on the signaling path and will not be able to signal for its
                    upstream direction. In such a situation the network nodes would
                    benefit from having information for both upstream and downstream
                    application flows to apply the right treatment to both
                    directions.</t>
            </section>

            <section title="Extensibility">
                <t> New use cases or new deployment scenarios will likely require the
                    use of new flow characteristics. For this reason the encoding
                    should support Metadata tag additions in a backwards compatible
                    way. New tag sets will consequently become superset
                    of older ones. Two implementations supporting different tag sets
                    can use the oldest of the two tag sets for the purpose of
                    applying treatment to or gathering information about the
                    endpoint or application flows.
                </t>
            </section>

            <section title="Flexibility">
                <t>
                    Distinct use cases and individual endpoints or applications
                    will likely have a need for different subsets of Metadata tags.
                    The encoding should support the signaling of any subset of
                    Metadata tags for that purpose. For example, a video
                    conferencing endpoint might need to signal which of its flows
                    are audio and video. Video surveillance cameras might only
                    signal video flows but will need to indicate which one has
                    priority based for example on embedded analytics.
                </t>
            </section>

            <section title="Per Producer Security">
                <t>
                    Integrity protection and authentication of flow characteristics
                    is a very important aspect for features using the Flow Metadata
                    signaling.
                    Indeed treatment applied on that basis can consume network
                    resources and therefore lead to their exhaustion. But the integrity
                    and authentication of the flow characteristics is not enough as
                    genuine applications or users can on purpose or by error send flow
                    chracteristics they are not authorized to send. To that end
                    Authorization should be one of the goals of any security method
                    used to secure the Metadata tags side by side with their
                    authentication and integrity.
                </t>
                <t>
                    This specification defines an optional Security element container
                    to be used for this purpose. However the security method to be used
                    is outside the scope of this specification.
                </t>

                <t>[
                    AZ - ok, but even with all security and authentication, apps can
                    lie, see that RFC Tiru pointed to
                    [ AC I have read the RFC and there are two aspects
                    1- Don't signal services but derive them otherwise application
                    will lie to obtain the treatment it wishes. On this one we are
                    covered as we are not signaling services but flow characteristics
                    2- How to secure the data sent. Here what we suggest is for the
                    security method to use a combination of Authentication, Integrity
                    and Authorization]
                    SM - This might be a very basic argument, but the token-based
                    schemes whose specs we've seen around would prevent apps from lying
                    as they can't lie to obtain the token (if the token server is 
                    well designed)
                    ]</t>
            </section>

            <section title="Compact Encoding">
                <t>
                    One of the goals of the encoding described in this specification
                    is to be compact and consume minimal space in the signaling protocol
                    payload. Most of the protocols have limited space for Metadata
                    purposes and do not support semantic fragmentation. The strategy
                    of the encoding is to minimize the encoding structures used
                    for the common signaling case. The common case is foreseen to
                    be the endpoint signaling standard flow characteristics.
                </t>
            </section>
        </section>
    </section>

    <section title="Encoding specification">
        <section title="Layout">
            <t>This section describes the encoding layout proposed by this
                specification. The format of the Flow Metadata (<xref
                    target="encoding_layout"/>) shows the layout of the different building
                blocks. </t>

            <t>
                The flow characteristics are grouped in sections within the encoding.
                A section pertains to an endpoint or to a producer. To segregate
                endpoint and producer sections the encoding uses a producer marker.
                The endpoint section comes first and does not use a producer marker as it is
                the default. The encoding MUST contain at least an endpoint or a
                producer section. <xref target="encoding_section" /> shows an
                example which combines an endpoint section with two producer
                sections.
            </t>
            <figure align="center" anchor="encoding_section" title="Encoding section">
                <artwork align="left"><![CDATA[
+--------------------------------+
|         Endpoint Section       |
+--------------------------------+
+--------------------------------+
|         Producer-1 Marker      |
+--------------------------------+
+--------------------------------+
|                                |
|                                |
|        Producer-1 Section      |
|                                |
+--------------------------------+
+--------------------------------+
|         Producer-2 Marker      |
+--------------------------------+
+--------------------------------+
|                                |
|                                |
|         Producer-2 Section     |
|                                |
|                                |
|                                |
+--------------------------------+
                    ]]></artwork>
            </figure>
            <t>
                A section is divided into standard and vendor sub-sections. A section
                MUST at least have one sub-section. A section MUST contain at most one
                standard sub-section and can contain multiple vendor sub-sections for
                different vendors. A standard and a vendor sub-section are
                segregated through a vendor marker. The standard sub-section if
                present must come first as it is the default.
                <xref target="encoding_section_content" /> shows a sample section
                content.
            </t>
            <t>
                A section MUST include at most one security token. The security token, 
                if present, MUST appear at the beginning of the section.
            </t>
            <figure align="center" anchor="encoding_section_content" title="Encoding section content">
                <artwork align="left"><![CDATA[
+--------------------------------+
|         Security Token         |
+--------------------------------+
+--------------------------------+
|                                |
|                                |
|      Standard Sub-Section      |
|                                |
+--------------------------------+
+--------------------------------+
|         Vendor-1 Marker        |
+--------------------------------+
+--------------------------------+
|       Vendor-1 Sub-Section     |
|                                |
|                                |
|                                |
|                                |
|                                |
+--------------------------------+
+--------------------------------+
|         Vendor-2 Marker        |
+--------------------------------+
+--------------------------------+
|       Vendor-2 Sub-Section     |
|                                |
|                                |
|                                |
|                                |
|                                |
+--------------------------------+
                    ]]></artwork>
            </figure>
            <t>
                A Sub-Section MUST contain at least one upstream or downstream
                block.  A Sub-Section MUST contain at most one upstream block,
                and at most one downstream block. Upstream and downstream blocks
                are composed of Metadata tags, each tag specifying a characteristic.
            </t>
            <t> SM - Do we want to order them? (i.e., if both upstream and downstream
                are present, upstream MUST appear first). I think that would simplify
                the parsers. Not sure about what Amine and Yann's code does
            </t>

            <figure align="center" anchor="encoding_subsection_content">
                <artwork align="left"><![CDATA[
+--------------------------------+
|          Upstream block        |
| +------------+  +------------+ |
| |  MD tag    |  |  MD tag    | |
| +------------+  +------------+ |
+--------------------------------+
+--------------------------------+
|        Downstream block        |
| +------------+  +------------+ |
| |  MD tag    |  |  MD tag    | |
| +------------+  +------------+ |
+--------------------------------+
                    ]]></artwork>
            </figure>
                <t>
                    The tags appearing in a standard and in a vendor sub-section are
                    managed by separate registries. A standard body will track the
                    standard tags allocation and separate vendor registries will
                    track vendor specific tag allocations.
                </t>

                <t>
                    <xref target="encoding_layout" /> shows a complete example
                    combining the endpoint and producer sections together with
                    their standard and vendor sub-sections.
                </t>
                <figure align="center" anchor="encoding_layout" title="">
                    <artwork align="left"><![CDATA[
+--------------------------------+
|         Security Token         |
+--------------------------------+
+--------------------------------+ ^  ^
|          Upstream block        | |  |E
| +------------+  +------------+ | |  |N
| |  MD tag    |  |  MD tag    | | |S |D
| +------------+  +------------+ | |T |P
+--------------------------------+ |D |O
+--------------------------------+ |  |I
|         Downstream block       | |S |N
| +------------+                 | |  |T
| |  MD tag    |                 | |  |
| +------------+                 | |  |S
+--------------------------------+ v  |E
+--------------------------------+    |C
|     Vendor section marker      |    |T
+--------------------------------+    |I
+--------------------------------+ ^  |O
|          Upstream block        | |V |N
| +------------+  +------------+ | |N |
| |  MD tag    |  |  MD tag    | | |D |
| +------------+  +------------+ | |  |
+--------------------------------+ vS v
+--------------------------------+    ^
|    Producer section marker     |    |
+--------------------------------+    |
+--------------------------------+    |P
|         Security Token         |    |R
+--------------------------------+    |O
+--------------------------------+    |D
|         Downstream block       |    |U
| +------------+                 |    |C
| |  MD tag    |                 |    |E
| +------------+                 |    |R
+--------------------------------+    |
+--------------------------------+    |S
|     Vendor section marker      |    |E
+--------------------------------+    |C
+--------------------------------+    |T
|         Downstream block       |    |I
| +------------+                 |    |O
| |  MD tag    |                 |    |N
| +------------+                 |    |
+--------------------------------+    v
                        ]]></artwork>
                </figure>

                <t><xref target="encoding_layout_compact"/> shows an encoding example
                    for Flow Metadata standard characteristics produced by an endpoint for
                    the upstream (same as 5-tuple) direction. As can be seen in the figure
                    no producer marker is used as we are signaling for the endpoint. In
                    the same way there is no vendor marker as we are signaling standard
                    flow characteristics. This example also assumes a use case where no
                    security token is needed. Further examples are given in
                    <xref target="examples"/>.</t>

                <figure align="center" anchor="encoding_layout_compact">
                    <artwork align="left"><![CDATA[
+--------------------------------+
|          Upstream block        |
| +------------+  +------------+ |
| |  MD tag    |  |  MD tag    | |
| +------------+  +------------+ |
+--------------------------------+
                        ]]></artwork>
                </figure>
            </section>

            <section title="Encoding Structures">
                <t>
                    This section explores the encoding looking more closely at the
                    encoding structures. <xref
                        target="encoding_ep_std_struct"/> shows the encoding used by an
                    endpoint using only standard tags. <xref
                        target="encoding_ep_vnd_struct"/> shows the encoding used by an
                    endpoint using only vendor specifc tags. <xref
                        target="encoding_nt_std_struct"/> shows the encoding for non endpoint
                    producers using only standard tags.
                    The three scenarios expose all the encoding structures, other
                    applications can be derived. The encoding makes use of Type Length
                    Value (TLV) as the base building block and some level of nesting to
                    create the different encoding structures. The type allows to indicate
                    which encoding structure is in use. In case of a marker, the length
                    gives the size of the marker but not of the delimited section or
                    sub-section.
                </t>

                <t>
                    As explained earlier endpoint and producer sections MUST contain at
                    least one standard or vendor sub-section and MAY contain a
                    security token.
                    The value of the security token TLV is broken down in two parts, a
                    security-scheme indicating the security method used and the
                    security-value holding the security payload specific to the security
                    scheme. The definition of the different security schemes and their
                    payloads are left to a separate document.
                </t>

                <t>
                    The value of the upstream and downstream block TLVs are subdivided in
                    Metadata tags. Each tag is itself a TLV specifying a flow
                    characteristic. The security token, the upstream and the
                    downstream block, the vendor and producer marker types are defined
                    within the same registry. On the other hand the tag types are
                    defined in a separate registry from the enclosing structures.
                </t>

                <t>[AZ - same for all the others in this spec, except attributes.]</t>

                <figure align="center" anchor="encoding_ep_std_struct">
                    <artwork align="left"><![CDATA[
0                   1                   2                   3
0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ ^S
|        Security-type          |             Length            | |E
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |C
|       Security-scheme         |                               : |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               : |T
:                       Security-value                          : |O
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ vK
|        Upstream-type          |             Length            |     ^U
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ ^M  |P
|           Tag-type            |             Length            | |D  |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |   |B
:                           Tag-value                           : |T  |L
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ v   |O
:                            ...                                :     |C
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+     vK
|        Downstream-type        |             Length            |     ^D
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+     |N
|           Tag-type            |             Length            |     |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+     |B
:                           Tag-value                           :     |L
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+     |O
:                            ...                                :     |C
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+     vK
                        ]]></artwork>
                </figure>

                <t><xref target="encoding_ep_vnd_struct"/> adds the vendor section
                    marker which starts a vendor section. The vendor marker is a TLV whose
                    type is defined in the same registry as the security token. Its value
                    is the vendor's Private Enterprise Number (PEN) allocated by IANA. The
                    vendor marker does not include the downstream and the upstream block
                    but rather sets the context to interpret them. Multiple vendor
                    sections within the same endpoint or producer section are allowed as
                    long as they pertain to different vendors.</t>

                <figure align="center" anchor="encoding_ep_vnd_struct">
                    <artwork align="left"><![CDATA[
0                   1                   2                   3
0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|        Security-type          |             Length            |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|       Security-scheme         |                               :
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               :
:                       Security-value                          :
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ ^
|           PEN-type            |             Length            | |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |
|                            PEN-id                             | |V
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |E
|        Upstream-type          |             Length            | |N
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |D
|           Tag-type            |             Length            | |O
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |R
:                           Tag-value                           : |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |S
:                            ...                                : |E
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |C
|        Downstream-type        |             Length            | |T
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |I
|           Tag-type            |             Length            | |O
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |N
:                           Tag-value                           : |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |
:                            ...                                : |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ v
                        ]]></artwork>
                </figure>

                <t><xref target="encoding_nt_std_struct"/> adds the producer marker
                    that starts a producer section. The producer marker is a TLV whose
                    type is defined within the same registry as the security token. The
                    value of the producer marker is the producer precedence that indicates
                    the administrative preference for the producer flow characteristics.
                    The precedence allows to merge information from different producers and
                    retain only the preferred one.</t>

                <figure align="center" anchor="encoding_nt_std_struct">
                    <artwork align="left"><![CDATA[
0                   1                   2                   3
0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ ^
|        Producer-type          |             Length            | |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |
|                          Precedence                           | |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |
|        Security-type          |             Length            | |P
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |R
|       Security-scheme         |                               : |O
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               : |D
:                       Security-value                          : |U
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |C
|        Upstream-type          |             Length            | |E
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |R
|           Tag-type            |             Length            | |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |S
:                           Tag-value                           : |E
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |C
:                            ...                                : |T
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |I
|        Downstream-type        |             Length            | |O
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |N
|           Tag-type            |             Length            | |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |
:                           Tag-value                           : |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |
:                            ...                                : |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ v
                        ]]></artwork>
                </figure>

                <t>All the constructs above can be combined to signal standard and
                    vendor specific tags for different producers and allow to secure each
                    producer information independently.</t>

                <t>SM - Somewhere in this section we should specify that a MD tag MUST NOT 
                   appear more than once in the same (upstream/downstream) block. The same
                   MD tag MAY appear in different block, or sections. For sub-sections, it
                   is obvious as a MD tag refers to different registries. Added this as an
                   edition comment because I'm not sure where to put it.
                </t>
            </section>

            <section title="ABNF">
                <figure align="left" anchor="abnf">
                    <artwork align="left"><![CDATA[
MD-block = Version (Endpoint-block / Producer-blocks / 
(Endpoint-block Producer-blocks))

Producer-blocks = 1*(Producer-tlv Producer-block)

Endpoint-block = Producer-block ; For the endpoint we do not
; require the Producer-tlv

Producer-block = [Security-tlv] (Standard-block / Vendor-blocks /
(Standard-block Vendor-blocks))

Vendor-blocks = 1*(PEN-tlv Flow-block)

Standard-block = Flow-block; We do not require the PEN-tlv
; for the standard tags

Flow-block = Upstream-tlv / Downstream-tlv /
(Upstream-tlv Downstream-tlv)
; If both present, upstream must come first

PEN-tlv = PEN-type Length PEN-id

Producer-tlv = Producer-type Length Precedence

Security-tlv = Security-type Length Security-scheme Security-value

Upstream-tlv = Upstream-type Length Upstream-value

Upstream-value = Attribute-list

Downstream-tlv = Downstream-type Length Downstream-value

Downstream-value = Attribute-list

Attribute-list = *(Attribute-tlv)

Attribute-tlv = Tag-type Length Attribute-value

;---------
;TERMINALS
;---------

Version = %x01 ;  NEW-VER will be picked up as the first
;  version of the encoding

PEN-id = 4(OCTET); Private Enterprise Number defined by IANA

Length = 2(OCTET); 16-bit length field

Precedence = 4(OCTET);  Indicates the preferred source of information
; for a producer-type

Security-scheme = OCTET; Type of security used

Security-value =  *(OCTET)
; length of this field must match Length of Security-tlv + 2

Tag-type = 2(OCTET) ; Value according to IANA / Vendor-specific registry

Producer-type = Zero %x01; The first foreseen producer is MD-NETWORK
; to cover for DPI engines, gateways and others
; Further values may be allocated later

PEN-type = Zero %x02 ; Actual value TBD

Security-type = Zero %x03 ; Actual value TBD

Upstream-type = Zero %x04 ; Actual value TBD

Downstream-type = Zero %x05 ; Actual value TBD

Attribute-value = *(%x0-FF) ; Actual value of a Metadata tag

Zero = %x00
                        ]]></artwork>
                </figure>
            </section>
        </section>

        <section anchor="Acknowledgements" title="Acknowledgements">
            <t>
                We would like to thank Yann Poupet and Davide Cuda for reviewing
                this document and helping us proof its content.
            </t>

        </section>

    <section anchor="Security" title="Security Considerations">
      <t>All drafts are required to have a security considerations section.
      See <xref target="RFC3552">RFC 3552</xref> for a guide.</t>
    </section>
    </middle>

    <!--  *****BACK MATTER ***** -->

    <back>
        <!-- References split into informative and normative -->

        <!-- There are 2 ways to insert reference entries from the citation libraries:
     1. define an ENTITY at the top, and use "ampersand character"RFC2629; here (as shown)
     2. simply use a PI "less than character"?rfc include="reference.RFC.2119.xml"?> here
        (for I-Ds: include="reference.I-D.narten-iana-considerations-rfc2434bis.xml")

     Both are cited textually in the same manner: by using xref elements.
     If you use the PI option, xml2rfc will, by default, try to find included files in the same
     directory as the including file. You can also define the XML_LIBRARY environment variable
     with a value containing a set of directories to search.  These can be either in the local
     filing system or remote ones accessed by http (http://domain/dir/... ).-->

    <references title="Normative References">
        <!--?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml"?-->

        &RFC2119;

        <reference anchor="min_ref">
            <!-- the following is the minimum to make xml2rfc happy -->

            <front>
                <title>Minimal Reference</title>

                <author initials="authInitials" surname="authSurName">
                    <organization/>
                </author>

                <date year="2006"/>
            </front>
        </reference>
    </references>

    <references title="Informative References">
        <!-- Here we use entities that we defined at the beginning. -->

        &RFC2629;

        &RFC3552;

        &I-D.narten-iana-considerations-rfc2434bis;

        <!-- A reference written by by an organization not a person. -->
    </references>

    <section anchor="examples" title="Encoding usage examples">
        <t>TBD</t>
    </section>
</back>
</rfc>
