<?xml version="1.0" encoding="US-ASCII"?>
<!-- This template is for creating an Internet Draft using xml2rfc,
     which is available here: http://xml.resource.org. -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
     There has to be one entity for each item to be referenced.
     An alternate method (rfc include) is described in the references. -->
<!ENTITY I-D.eckert-intarea-flow-metadata-framework SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.eckert-intarea-flow-metadata-framework.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs),
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<rfc category="info" docName="draft-eckel-aeon-problem-statement-00"
     ipr="trust200902">
  <!--  category values: std, bcp
, info, exp, and historic
     ipr values: full3667, noModification3667, noDerivatives3667
     you can add the attributes updates="NNNN" and obsoletes="NNNN"
     they will automatically be output with "(if approved)" -->

  <!-- ***** FRONT MATTER ***** -->

  <front>
    <!-- The abbreviated title is used in the page header - it is only necessary if the
         full title is longer than 39 characters -->

    <title abbrev="AEON Problem Statement">Application Enabled Open Networking
    Problem Statement</title>

    <!-- add 'role="editor"' below for the editors if appropriate -->

    <!-- Another author who claims to be an editor -->

    <author fullname="Charles Eckel" initials="C." surname="Eckel">
      <organization>Cisco Systems, Inc.</organization>

      <address>
        <postal>
          <street>170 West Tasman Drive</street>

          <city>San Jose</city>

          <region>CA</region>

          <code>95134</code>

          <country>USA</country>
        </postal>

        <email>eckelcu@cisco.com</email>

        <!-- uri and facsimile elements may also be added -->
      </address>
    </author>

    <date/>

    <!-- If the month and year are both specified and are the current ones, xml2rfc will fill
         in the current day for you. If only the current year is specified, xml2rfc will fill
	 in the current day and month for you. If the year is not the current one, it is
	 necessary to specify at least a month (xml2rfc assumes day="1" if not specified for the
	 purpose of calculating the expiry date).  With drafts it is normally sufficient to
	 specify just the year. -->

    <!-- Meta-data Declarations -->

    <area>General</area>

    <workgroup>Internet Engineering Task Force</workgroup>

    <!-- WG name at the upperleft corner of the doc,
         IETF is fine for individual submissions.
	 If this element is not present, the default is "Network Working Group",
         which is used by the RFC Editor as a nod to the history of the IETF. -->

    <!-- Keywords will be incorporated into HTML output
         files in a meta tag but they have no effect on text or nroff
         output. If you submit your draft to the RFC Editor, the
         keywords will be used for the search engine. -->

    <keyword>aeon visibility heuristics</keyword>

    <abstract>
      <t>Identification and treatment of application flows are critical for
      the successful deployment and operation of applications based on a wide
      range of signaling protocols. Historically, this functionality has been
      accomplished to the extent possible using heuristics, which inspect and
      infer flow characteristics. Heuristics may be based on port ranges, IP
      subnetting, or deep packet inspection (DPI), e.g. by an application
      level gateway (ALG). Current trends in application deployment, usage,
      and traffic renders such techniques less effective and/or result in
      compromises to application security or user privacy. A better solution
      is required that allows applications to explicitly and willingly
      communicate flow characteristics to the network, and that allows the
      network to communicate what it can provide as feedback to
      applications.</t>
    </abstract>
  </front>

  <middle>
    <section title="Introduction">
      <t>Networks today, whether public or private, are challenged with
      demands to support rapidly increasing amounts of traffic. New channels
      for creating and consuming rich media are deployed at a rapid pace.
      Pervasive video and on demand access are becoming second nature to
      consumers. Communication applications make extensive use of rich media,
      placing unprecedented quality of experience demands on the network. All
      available capacity is saturated at whatever rate it is added.</t>

      <t>Now more so than ever before, identification and treatment of
      application flows is critical for the successful deployment and
      operation of applications. These applications are based on wide range of
      signaling protocols and deployed by a diverse set of application
      providers that is not necessarily affiliated with the network providers
      across which the applications are used.</t>

      <t>Historically, identification of application flows has been
      accomplished using heuristics, which inspect and infer flow
      characteristics. Heuristics may be based on port ranges, IP subnetting,
      or deep packet inspection (DPI), e.g. by an application level gateway
      (ALG). Each of these techniques suffers from a set of limitations,
      particularly in the face of challenges on the network outlined
      previously.</t>

      <t> Port based solutions suffer from port overloading and inconsistent
      port usage. IP subnetting solutions are error prone and result increase
      network management complexity. DPI is computationally expensive and
      becomes a greater challenge with the wider adoption of encrypted
      signaling and secured media. An additional drawback of DPI is that the
      resulting insights are not available, or need to be recomputed, at
      network nodes further down the application flow path. </t>
    </section>

    <section title="Typical Workflows">
      <t>Various heuristic based approaches are used prevalently and
      successfully for two types of workflows:<list counter="1"
          style="numbers">
          <t>Provide network operators with visibility into traffic for
          troubleshooting, capacity planning, accounting and billing and other
          off network workflows. This is done by exporting observed traffic
          analysis via protocols such as IPFIX and SNMP.</t>

          <t>Provide differentiated network services for the traffic according
          to network operator defined rule sets, including policing and
          shaping of traffic, providing admission control, impacting routing,
          permitting passage of traffic (e.g. firewall functions), etc.</t>
        </list></t>
    </section>

    <section title="Limitations of Existing Solutions">
      <t>These typical workflows, visibility and differentiated network
      services, are critical in many networks. However, their reliance on
      inspection and observation limits the ability to enable these workflows
      more widely. Reasons for this include the following:<list
          style="symbols">
          <t>Simple observation based classification, especially ones relying
          on TCP/UDP, ports often result in incorrect results due to port
          overloading (i.e. ports used by applications other than those
          claiming the port with IANA).</t>

          <t>More and more traffic is encrypted, rendering DPI impossible, or
          much more complex, and sometimes at the expense of privacy or
          security (e.g. need to share encryption keys with intermediary
          performing DPI).</t>

          <t>Observation generally requires inspecting the control and
          signaling traffic of applications. This traffic may flow through a
          different network path than the actual application data traffic.
          Impacting the traffic behavior is ineffective in those
          scenarios.</t>

          <t>Observation of control, signaling and data traffic with DPI will
          in general result in less insight into the applications intent than
          if the application was explicitly signaling its intent to the
          network.</t>

          <t>Without explicit involvement of the application, network services
          leveraging DPI traffic classification impact the application
          behavior by impacting its traffic, but cannot provide explicit
          feedback to the application. This results in a lost opportunity for
          the application to gain insight and cooperate with the network.</t>
        </list></t>
    </section>

    <section title="Efforts in Progress">
      <t>There are a variety of existing and evolving signaling options that
      can provide explicit application to network signaling and serve the
      visibility and differentiated network services workflows where DPI is
      currently being used. It seems clear that there will be no single
      one-protocol-fits-all solution. Every protocol is currently defined in
      its own silo, creating duplicate or inconsistent information models.
      This results in duplicate work, more operational complexity and an
      inability to easily convert information between protocols to easily
      leverage the best protocol option for each specific use case. Examples
      of existing and evolving signaling options include the following:<list
          style="symbols">
          <t>RSVP is the original on path signaling protocol standardized by
          the IETF. It operates on path out-of-band and could support any
          transport protocol traffic (it currently supports TCP and UDP). Its
          original goal was to provide admission control. Arguably, its
          success was impacted by its reliance on router-alert because this
          often leads to RSVP packets being filtered by intervening networks.
          To date, more lightweight signaling workflows utilizing RSVP have
          not been standardized within the IETF.</t>

          <t> NSIS (next Steps in Signaling) is the next iteration of
          RSVP-like signaling defined by the IETF. Because it focused on the
          same fundamental workflow as RSVP admission control as its main
          driver, and because it did not provide significant enough use-case
          benefits over RSVP, it has seen even less adoption than RSVP.</t>

          <t> STUN is an on path, in-band signaling protocol that could easily
          be extended to provide signaling to on path network devices because
          it provides an easily inspected packet signature, at least for
          transport protocols such as UDP and SCTP. Through its extensions
          TURN and ICE, it is becoming quite popular in application signaling
          driven by the initial use-case of automatically opening up firewall
          pinholes and determining the best local and remote addresses for
          peer-to-peer connectivity (ICE).</t>

          <t> PCP is a protocol designed to support use cases similar to UPnP
          firewall traversal. It also can easily be extended to provide more
          generic application to network signaling for traffic flows. Unlike
          the prior protocols, it is not meant to be used on path end-to-end
          but rather independently on one "edge" of a traffic flow. It is
          therefore an attractive alternative (albeit with challenges under
          path redundancy) because it allows the introduction of application
          to network signaling without relying on the remote peer. This is
          especially useful in multi-domain communications.</t>

          <t>Depending on the devices where it is performed, different degrees
          of DPI may be used to achieve explicit signaling. For example,
          inspection of HTTP connections is often viable in high-touch network
          devices. Such inspection may provide explicit signaling if the
          application purposely keeps or inserts information elements that are
          meant to be signaled to the network in the clear, or knowingly uses
          an encryption scheme shared with the network.</t>
        </list>Rather than encourage independent, protocol specific solutions
      to this problem, this draft calls for a protocol and application
      independent solution that can be applied in a consistent fashion across
      a variety of protocols. The solution should:<list style="symbols">
          <t>allow applications to explicitly signal their flow
          characteristics to the network </t>

          <t>provide network nodes visibility to application flow
          characteristics</t>

          <t>enable network nodes to contribute to application flow
          descriptions</t>

          <t>allow applications to receive resulting flow descriptions as
          feedback from the network</t>

          <t>complement existing heuristic based mechanisms</t>
        </list>The solution should not:<list style="symbols">
          <t>compromise the privacy or security of applications, their end
          users, or network nodes</t>

          <t>preclude the use of existing heuristic based mechanisms</t>
        </list></t>
    </section>

    <section anchor="Acknowledgements" title="Acknowledgements">
      <t>The authors thank Toerless Eckert, Reinaldo Penno, and Amine Choukir
      for contributing much of the original content.</t>
    </section>
  </middle>

  <!--  *****BACK MATTER ***** -->

  <back>
    <!-- References split into informative and normative -->

    <!-- There are 2 ways to insert reference entries from the citation libraries:
     1. define an ENTITY at the top, and use "ampersand character"RFC2629; here (as shown)
     2. simply use a PI "less than character"?rfc include="reference.RFC.2119.xml"?> here
        (for I-Ds: include="reference.I-D.narten-iana-considerations-rfc2434bis.xml")

     Both are cited textually in the same manner: by using xref elements.
     If you use the PI option, xml2rfc will, by default, try to find included files in the same
     directory as the including file. You can also define the XML_LIBRARY environment variable
     with a value containing a set of directories to search.  These can be either in the local
     filing system or remote ones accessed by http (http://domain/dir/... ).-->
  </back>
</rfc>
